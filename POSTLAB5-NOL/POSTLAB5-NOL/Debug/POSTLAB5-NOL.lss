
POSTLAB5-NOL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000836  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000836  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000836  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000868  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000918  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000741  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000041e  00000000  00000000  00001969  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00001d88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f3  00000000  00000000  00001ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ce  00000000  00000000  000022eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000026b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  88:	0c 94 df 03 	jmp	0x7be	; 0x7be <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
		
	}
}

void initADC(void){
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	//Selecciona la referencia (Vref)=AVCC=5V
	ADMUX |= (1<<REFS0);
  96:	80 81       	ld	r24, Z
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  9c:	80 81       	ld	r24, Z
  9e:	8f 77       	andi	r24, 0x7F	; 127
  a0:	80 83       	st	Z, r24
	
	//ADLAR - Justificación hacia la izquierda 8b
	//Valores de 0 a 255 -- 8 bits
	//Valores de 0 a 1023 -- 10 bits
	ADMUX |= (1<<ADLAR); //Si 0=10 bits, si 1=8bits
  a2:	80 81       	ld	r24, Z
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	80 83       	st	Z, r24
	
	ADCSRA = 0; //Set registro en 0
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	// ADEN - Enciende ADC
	ADCSRA |= (1<<ADEN);
  ae:	80 81       	ld	r24, Z
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	80 83       	st	Z, r24
	// ADIE - Habilita ISR ADC
	ADCSRA |= (1<<ADIE);
  b4:	80 81       	ld	r24, Z
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	80 83       	st	Z, r24
	
	// Ya que nos encontramos en el rango permitido, es posible usar alta resolución
	// Prescaler 128 > 16MHz / 128 = 125KHz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  ba:	80 81       	ld	r24, Z
  bc:	87 60       	ori	r24, 0x07	; 7
  be:	80 83       	st	Z, r24
	
	DIDR0 |= (1<<ADC0D);	//Deshabilita las entradas digitales en PC0
  c0:	ee e7       	ldi	r30, 0x7E	; 126
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <main>:
//Variables:
uint8_t canales = 0;

int main(void)
{
	cli(); //Apaga las interrupciones
  cc:	f8 94       	cli
	
	//Configuración para TIMER1---------------------------------------------------------
	
	DDRB |= (1 << PORTB2) | (1 << PORTB1); //PB2 y PB1 como salidas (OC0A and OCR0B)
  ce:	84 b1       	in	r24, 0x04	; 4
  d0:	86 60       	ori	r24, 0x06	; 6
  d2:	84 b9       	out	0x04, r24	; 4
	DDRC = 0; //Puerto C como salida -- SERVOS
  d4:	17 b8       	out	0x07, r1	; 7
	
	//Set los registros del timer1 en 0 para facilitar la configuración
	TCCR1A = 0;
  d6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
  da:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	//TCCR1B |= (1<<CS11); //Prescaler 8 bits
	//ICR1 = 39999; //Valor de TOP
	*/
	
	modeTIMER1(); //Establecer modo fast PWM para los canales A y B
  de:	0e 94 bf 01 	call	0x37e	; 0x37e <modeTIMER1>
	chanelSelectANDinvertedORnot(1, no_invertido); //Seleccionar canal A y No Invertido
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 9f 01 	call	0x33e	; 0x33e <chanelSelectANDinvertedORnot>
	chanelSelectANDinvertedORnot(2, no_invertido); //Seleccionar canal B y No Invertido
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	0e 94 9f 01 	call	0x33e	; 0x33e <chanelSelectANDinvertedORnot>
	prescalerFORchanel(); //Establecer prescaler de 8 bits
  f2:	0e 94 ca 01 	call	0x394	; 0x394 <prescalerFORchanel>
	//FIN TIMER1------------------------------------------------------------------------
	
	//Configuración para TIMER0---------------------------------------------------------
	//TIMER0 para manipular brillo de LED
	
	DDRD |= (1<<PORTD5); //PD5 como salida (OC0B)
  f6:	8a b1       	in	r24, 0x0a	; 10
  f8:	80 62       	ori	r24, 0x20	; 32
  fa:	8a b9       	out	0x0a, r24	; 10
	
	//Set los registros del timer0 en 0 para facilitar la configuración
	TCCR0A = 0;
  fc:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
  fe:	15 bc       	out	0x25, r1	; 37
	
	//Configurando modo y canal: No invertido y  FAST PWM (TOP = 255)
	TCCR0A |= (1<<WGM00)|(1<<WGM01)|(1<<COM0B1);
 100:	84 b5       	in	r24, 0x24	; 36
 102:	83 62       	ori	r24, 0x23	; 35
 104:	84 bd       	out	0x24, r24	; 36
	
	TCCR0B = 0x05; //Prescaler 1024
 106:	85 e0       	ldi	r24, 0x05	; 5
 108:	85 bd       	out	0x25, r24	; 37
	
	//FIN TIMER0------------------------------------------------------------------------
	
	initADC(); //Llama initADC
 10a:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	sei(); //Enciende las interrupciones
 10e:	78 94       	sei
	ADCSRA |= (1 << ADSC); //Se inicia la interrupción
 110:	ea e7       	ldi	r30, 0x7A	; 122
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	80 64       	ori	r24, 0x40	; 64
 118:	80 83       	st	Z, r24
 11a:	ff cf       	rjmp	.-2      	; 0x11a <main+0x4e>

0000011c <map>:
	}
	ADCSRA |= (1<<ADSC); //Inicia la conversión - Es decir, vuelve a leer
}

//Mapeo del servo
float map(float position, float minimo, float maximo, float minimopwm, float maximopwm){
 11c:	4f 92       	push	r4
 11e:	5f 92       	push	r5
 120:	6f 92       	push	r6
 122:	7f 92       	push	r7
 124:	af 92       	push	r10
 126:	bf 92       	push	r11
 128:	cf 92       	push	r12
 12a:	df 92       	push	r13
 12c:	ef 92       	push	r14
 12e:	ff 92       	push	r15
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 13c:	28 97       	sbiw	r28, 0x08	; 8
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	f8 94       	cli
 142:	de bf       	out	0x3e, r29	; 62
 144:	0f be       	out	0x3f, r0	; 63
 146:	cd bf       	out	0x3d, r28	; 61
 148:	29 01       	movw	r4, r18
 14a:	3a 01       	movw	r6, r20
 14c:	ed 82       	std	Y+5, r14	; 0x05
 14e:	fe 82       	std	Y+6, r15	; 0x06
 150:	0f 83       	std	Y+7, r16	; 0x07
 152:	18 87       	std	Y+8, r17	; 0x08
	return ((position - minimo)*(maximopwm - minimopwm)/(maximo - minimo)) + minimopwm;
 154:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__subsf3>
 158:	69 83       	std	Y+1, r22	; 0x01
 15a:	7a 83       	std	Y+2, r23	; 0x02
 15c:	8b 83       	std	Y+3, r24	; 0x03
 15e:	9c 83       	std	Y+4, r25	; 0x04
 160:	a6 01       	movw	r20, r12
 162:	95 01       	movw	r18, r10
 164:	69 8d       	ldd	r22, Y+25	; 0x19
 166:	7a 8d       	ldd	r23, Y+26	; 0x1a
 168:	8b 8d       	ldd	r24, Y+27	; 0x1b
 16a:	9c 8d       	ldd	r25, Y+28	; 0x1c
 16c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__subsf3>
 170:	9b 01       	movw	r18, r22
 172:	ac 01       	movw	r20, r24
 174:	69 81       	ldd	r22, Y+1	; 0x01
 176:	7a 81       	ldd	r23, Y+2	; 0x02
 178:	8b 81       	ldd	r24, Y+3	; 0x03
 17a:	9c 81       	ldd	r25, Y+4	; 0x04
 17c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
 180:	69 83       	std	Y+1, r22	; 0x01
 182:	7a 83       	std	Y+2, r23	; 0x02
 184:	8b 83       	std	Y+3, r24	; 0x03
 186:	9c 83       	std	Y+4, r25	; 0x04
 188:	a3 01       	movw	r20, r6
 18a:	92 01       	movw	r18, r4
 18c:	c8 01       	movw	r24, r16
 18e:	b7 01       	movw	r22, r14
 190:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__subsf3>
 194:	9b 01       	movw	r18, r22
 196:	ac 01       	movw	r20, r24
 198:	69 81       	ldd	r22, Y+1	; 0x01
 19a:	7a 81       	ldd	r23, Y+2	; 0x02
 19c:	8b 81       	ldd	r24, Y+3	; 0x03
 19e:	9c 81       	ldd	r25, Y+4	; 0x04
 1a0:	0e 94 43 02 	call	0x486	; 0x486 <__divsf3>
 1a4:	9b 01       	movw	r18, r22
 1a6:	ac 01       	movw	r20, r24
 1a8:	c6 01       	movw	r24, r12
 1aa:	b5 01       	movw	r22, r10
 1ac:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__addsf3>
}
 1b0:	28 96       	adiw	r28, 0x08	; 8
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	f8 94       	cli
 1b6:	de bf       	out	0x3e, r29	; 62
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	cd bf       	out	0x3d, r28	; 61
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	0f 91       	pop	r16
 1c4:	ff 90       	pop	r15
 1c6:	ef 90       	pop	r14
 1c8:	df 90       	pop	r13
 1ca:	cf 90       	pop	r12
 1cc:	bf 90       	pop	r11
 1ce:	af 90       	pop	r10
 1d0:	7f 90       	pop	r7
 1d2:	6f 90       	pop	r6
 1d4:	5f 90       	pop	r5
 1d6:	4f 90       	pop	r4
 1d8:	08 95       	ret

000001da <__vector_21>:
	
	DIDR0 |= (1<<ADC0D);	//Deshabilita las entradas digitales en PC0
}

//Interrupciones
ISR (ADC_vect){
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	af 92       	push	r10
 1e6:	bf 92       	push	r11
 1e8:	cf 92       	push	r12
 1ea:	df 92       	push	r13
 1ec:	ef 92       	push	r14
 1ee:	ff 92       	push	r15
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	2f 93       	push	r18
 1f6:	3f 93       	push	r19
 1f8:	4f 93       	push	r20
 1fa:	5f 93       	push	r21
 1fc:	6f 93       	push	r22
 1fe:	7f 93       	push	r23
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	af 93       	push	r26
 206:	bf 93       	push	r27
 208:	ef 93       	push	r30
 20a:	ff 93       	push	r31

	ADCSRA |= (1 << ADIF);	//Apaga la bandera
 20c:	ea e7       	ldi	r30, 0x7A	; 122
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	80 61       	ori	r24, 0x10	; 16
 214:	80 83       	st	Z, r24
	
	if (canales==0){ //canales set en 0 al inicio del programa - canal0
 216:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 21a:	81 11       	cpse	r24, r1
 21c:	31 c0       	rjmp	.+98     	; 0x280 <__vector_21+0xa6>
		canales=1; //Al entrar en el canal 0 se cambia al canal 1
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		ADMUX = (ADMUX&0xF0); //ADMUX en canal 0
 224:	ec e7       	ldi	r30, 0x7C	; 124
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	80 7f       	andi	r24, 0xF0	; 240
 22c:	80 83       	st	Z, r24
		OCR1A = map(ADCH, 0, 255, 1000, 4000); // Escala (valorminbits, valormaxbits, minpulso, maxpulso)
 22e:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__floatunsisf>
 23c:	25 e4       	ldi	r18, 0x45	; 69
 23e:	2f 93       	push	r18
 240:	2a e7       	ldi	r18, 0x7A	; 122
 242:	2f 93       	push	r18
 244:	1f 92       	push	r1
 246:	1f 92       	push	r1
 248:	0f 2e       	mov	r0, r31
 24a:	a1 2c       	mov	r10, r1
 24c:	b1 2c       	mov	r11, r1
 24e:	fa e7       	ldi	r31, 0x7A	; 122
 250:	cf 2e       	mov	r12, r31
 252:	f4 e4       	ldi	r31, 0x44	; 68
 254:	df 2e       	mov	r13, r31
 256:	f0 2d       	mov	r31, r0
 258:	e1 2c       	mov	r14, r1
 25a:	f1 2c       	mov	r15, r1
 25c:	0f e7       	ldi	r16, 0x7F	; 127
 25e:	13 e4       	ldi	r17, 0x43	; 67
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	a9 01       	movw	r20, r18
 266:	0e 94 8e 00 	call	0x11c	; 0x11c <map>
 26a:	0f 90       	pop	r0
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	0f 90       	pop	r0
 272:	0e 94 b5 02 	call	0x56a	; 0x56a <__fixunssfsi>
 276:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 27a:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 27e:	41 c0       	rjmp	.+130    	; 0x302 <__vector_21+0x128>
		//ADCH solo lee los registros del HIGH
	}
	else if(canales==1){
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	91 f5       	brne	.+100    	; 0x2e8 <__vector_21+0x10e>
		canales=2; //Al entrar en el canal 1 se cambia al canal 2
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		ADMUX = (ADMUX&0xF0)|1; //ADMUX en canal 1
 28a:	ec e7       	ldi	r30, 0x7C	; 124
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	80 7f       	andi	r24, 0xF0	; 240
 292:	81 60       	ori	r24, 0x01	; 1
 294:	80 83       	st	Z, r24
		OCR1B = map(ADCH, 0, 255, 1000, 4000);
 296:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__floatunsisf>
 2a4:	25 e4       	ldi	r18, 0x45	; 69
 2a6:	2f 93       	push	r18
 2a8:	2a e7       	ldi	r18, 0x7A	; 122
 2aa:	2f 93       	push	r18
 2ac:	1f 92       	push	r1
 2ae:	1f 92       	push	r1
 2b0:	0f 2e       	mov	r0, r31
 2b2:	a1 2c       	mov	r10, r1
 2b4:	b1 2c       	mov	r11, r1
 2b6:	fa e7       	ldi	r31, 0x7A	; 122
 2b8:	cf 2e       	mov	r12, r31
 2ba:	f4 e4       	ldi	r31, 0x44	; 68
 2bc:	df 2e       	mov	r13, r31
 2be:	f0 2d       	mov	r31, r0
 2c0:	e1 2c       	mov	r14, r1
 2c2:	f1 2c       	mov	r15, r1
 2c4:	0f e7       	ldi	r16, 0x7F	; 127
 2c6:	13 e4       	ldi	r17, 0x43	; 67
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	a9 01       	movw	r20, r18
 2ce:	0e 94 8e 00 	call	0x11c	; 0x11c <map>
 2d2:	0f 90       	pop	r0
 2d4:	0f 90       	pop	r0
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	0e 94 b5 02 	call	0x56a	; 0x56a <__fixunssfsi>
 2de:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 2e2:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 2e6:	0d c0       	rjmp	.+26     	; 0x302 <__vector_21+0x128>
	}
	else if(canales==2){
 2e8:	82 30       	cpi	r24, 0x02	; 2
 2ea:	59 f4       	brne	.+22     	; 0x302 <__vector_21+0x128>
		canales = 0; //Al entrar en el canal 2 se cambia al canal 0
 2ec:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		ADMUX = (ADMUX&0xF0)|2; //ADMUX en canal 2
 2f0:	ec e7       	ldi	r30, 0x7C	; 124
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	80 7f       	andi	r24, 0xF0	; 240
 2f8:	82 60       	ori	r24, 0x02	; 2
 2fa:	80 83       	st	Z, r24
		OCR0B = ADCH;
 2fc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 300:	88 bd       	out	0x28, r24	; 40
	}
	ADCSRA |= (1<<ADSC); //Inicia la conversión - Es decir, vuelve a leer
 302:	ea e7       	ldi	r30, 0x7A	; 122
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	80 64       	ori	r24, 0x40	; 64
 30a:	80 83       	st	Z, r24
}
 30c:	ff 91       	pop	r31
 30e:	ef 91       	pop	r30
 310:	bf 91       	pop	r27
 312:	af 91       	pop	r26
 314:	9f 91       	pop	r25
 316:	8f 91       	pop	r24
 318:	7f 91       	pop	r23
 31a:	6f 91       	pop	r22
 31c:	5f 91       	pop	r21
 31e:	4f 91       	pop	r20
 320:	3f 91       	pop	r19
 322:	2f 91       	pop	r18
 324:	1f 91       	pop	r17
 326:	0f 91       	pop	r16
 328:	ff 90       	pop	r15
 32a:	ef 90       	pop	r14
 32c:	df 90       	pop	r13
 32e:	cf 90       	pop	r12
 330:	bf 90       	pop	r11
 332:	af 90       	pop	r10
 334:	0f 90       	pop	r0
 336:	0f be       	out	0x3f, r0	; 63
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <chanelSelectANDinvertedORnot>:
#include "PWM1.h"
//invertido 1
//no_invertido 0

void chanelSelectANDinvertedORnot(uint8_t chanelS, uint8_t invertOR){ //Seleccionar canal y si canal invertido o no invertido
	if (chanelS==1){ //1=Canal A
 33e:	81 30       	cpi	r24, 0x01	; 1
 340:	71 f4       	brne	.+28     	; 0x35e <chanelSelectANDinvertedORnot+0x20>
		if (invertOR==1){
 342:	61 30       	cpi	r22, 0x01	; 1
 344:	31 f4       	brne	.+12     	; 0x352 <chanelSelectANDinvertedORnot+0x14>
			TCCR1A |= (1<<COM1A0)|(1<<COM1A1); //Invertido Canal A
 346:	e0 e8       	ldi	r30, 0x80	; 128
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	80 6c       	ori	r24, 0xC0	; 192
 34e:	80 83       	st	Z, r24
 350:	08 95       	ret
		}
		else{
			TCCR1A |= (1<<COM1A1); //No Invertido Canal A
 352:	e0 e8       	ldi	r30, 0x80	; 128
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	80 68       	ori	r24, 0x80	; 128
 35a:	80 83       	st	Z, r24
 35c:	08 95       	ret
		}
	}
		
	else if (chanelS==2){ //1=Canal B
 35e:	82 30       	cpi	r24, 0x02	; 2
 360:	69 f4       	brne	.+26     	; 0x37c <chanelSelectANDinvertedORnot+0x3e>
		if (invertOR==1){
 362:	61 30       	cpi	r22, 0x01	; 1
 364:	31 f4       	brne	.+12     	; 0x372 <chanelSelectANDinvertedORnot+0x34>
			TCCR1A |= (1<<COM1B0)|(1<<COM1B1); //Invertido Canal B
 366:	e0 e8       	ldi	r30, 0x80	; 128
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	80 63       	ori	r24, 0x30	; 48
 36e:	80 83       	st	Z, r24
 370:	08 95       	ret
		}
		else{
			TCCR1A |= (1<<COM1B1); //No Invertido Canal B
 372:	e0 e8       	ldi	r30, 0x80	; 128
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	80 62       	ori	r24, 0x20	; 32
 37a:	80 83       	st	Z, r24
 37c:	08 95       	ret

0000037e <modeTIMER1>:
}


void modeTIMER1(void){ //Establecer modo fast PWM para los canales A y B

TCCR1A |= (1<<WGM11);
 37e:	e0 e8       	ldi	r30, 0x80	; 128
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	82 60       	ori	r24, 0x02	; 2
 386:	80 83       	st	Z, r24
TCCR1B |= (1<<WGM12)|(1<<WGM13);	
 388:	e1 e8       	ldi	r30, 0x81	; 129
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	88 61       	ori	r24, 0x18	; 24
 390:	80 83       	st	Z, r24
 392:	08 95       	ret

00000394 <prescalerFORchanel>:

}

void prescalerFORchanel(void){ //Establecer prescaler de 8 bits
TCCR1B |= (1<<CS11); //Prescaler 8 bits
 394:	e1 e8       	ldi	r30, 0x81	; 129
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	82 60       	ori	r24, 0x02	; 2
 39c:	80 83       	st	Z, r24
ICR1 = 39999; //Valor de TOP	
 39e:	8f e3       	ldi	r24, 0x3F	; 63
 3a0:	9c e9       	ldi	r25, 0x9C	; 156
 3a2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 3a6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 3aa:	08 95       	ret

000003ac <__subsf3>:
 3ac:	50 58       	subi	r21, 0x80	; 128

000003ae <__addsf3>:
 3ae:	bb 27       	eor	r27, r27
 3b0:	aa 27       	eor	r26, r26
 3b2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__addsf3x>
 3b6:	0c 94 38 03 	jmp	0x670	; 0x670 <__fp_round>
 3ba:	0e 94 2a 03 	call	0x654	; 0x654 <__fp_pscA>
 3be:	38 f0       	brcs	.+14     	; 0x3ce <__addsf3+0x20>
 3c0:	0e 94 31 03 	call	0x662	; 0x662 <__fp_pscB>
 3c4:	20 f0       	brcs	.+8      	; 0x3ce <__addsf3+0x20>
 3c6:	39 f4       	brne	.+14     	; 0x3d6 <__addsf3+0x28>
 3c8:	9f 3f       	cpi	r25, 0xFF	; 255
 3ca:	19 f4       	brne	.+6      	; 0x3d2 <__addsf3+0x24>
 3cc:	26 f4       	brtc	.+8      	; 0x3d6 <__addsf3+0x28>
 3ce:	0c 94 27 03 	jmp	0x64e	; 0x64e <__fp_nan>
 3d2:	0e f4       	brtc	.+2      	; 0x3d6 <__addsf3+0x28>
 3d4:	e0 95       	com	r30
 3d6:	e7 fb       	bst	r30, 7
 3d8:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_inf>

000003dc <__addsf3x>:
 3dc:	e9 2f       	mov	r30, r25
 3de:	0e 94 49 03 	call	0x692	; 0x692 <__fp_split3>
 3e2:	58 f3       	brcs	.-42     	; 0x3ba <__addsf3+0xc>
 3e4:	ba 17       	cp	r27, r26
 3e6:	62 07       	cpc	r22, r18
 3e8:	73 07       	cpc	r23, r19
 3ea:	84 07       	cpc	r24, r20
 3ec:	95 07       	cpc	r25, r21
 3ee:	20 f0       	brcs	.+8      	; 0x3f8 <__addsf3x+0x1c>
 3f0:	79 f4       	brne	.+30     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3f2:	a6 f5       	brtc	.+104    	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 3f4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__fp_zero>
 3f8:	0e f4       	brtc	.+2      	; 0x3fc <__addsf3x+0x20>
 3fa:	e0 95       	com	r30
 3fc:	0b 2e       	mov	r0, r27
 3fe:	ba 2f       	mov	r27, r26
 400:	a0 2d       	mov	r26, r0
 402:	0b 01       	movw	r0, r22
 404:	b9 01       	movw	r22, r18
 406:	90 01       	movw	r18, r0
 408:	0c 01       	movw	r0, r24
 40a:	ca 01       	movw	r24, r20
 40c:	a0 01       	movw	r20, r0
 40e:	11 24       	eor	r1, r1
 410:	ff 27       	eor	r31, r31
 412:	59 1b       	sub	r21, r25
 414:	99 f0       	breq	.+38     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 416:	59 3f       	cpi	r21, 0xF9	; 249
 418:	50 f4       	brcc	.+20     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 41a:	50 3e       	cpi	r21, 0xE0	; 224
 41c:	68 f1       	brcs	.+90     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 41e:	1a 16       	cp	r1, r26
 420:	f0 40       	sbci	r31, 0x00	; 0
 422:	a2 2f       	mov	r26, r18
 424:	23 2f       	mov	r18, r19
 426:	34 2f       	mov	r19, r20
 428:	44 27       	eor	r20, r20
 42a:	58 5f       	subi	r21, 0xF8	; 248
 42c:	f3 cf       	rjmp	.-26     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 42e:	46 95       	lsr	r20
 430:	37 95       	ror	r19
 432:	27 95       	ror	r18
 434:	a7 95       	ror	r26
 436:	f0 40       	sbci	r31, 0x00	; 0
 438:	53 95       	inc	r21
 43a:	c9 f7       	brne	.-14     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 43c:	7e f4       	brtc	.+30     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 43e:	1f 16       	cp	r1, r31
 440:	ba 0b       	sbc	r27, r26
 442:	62 0b       	sbc	r22, r18
 444:	73 0b       	sbc	r23, r19
 446:	84 0b       	sbc	r24, r20
 448:	ba f0       	brmi	.+46     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 44a:	91 50       	subi	r25, 0x01	; 1
 44c:	a1 f0       	breq	.+40     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 44e:	ff 0f       	add	r31, r31
 450:	bb 1f       	adc	r27, r27
 452:	66 1f       	adc	r22, r22
 454:	77 1f       	adc	r23, r23
 456:	88 1f       	adc	r24, r24
 458:	c2 f7       	brpl	.-16     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 45a:	0e c0       	rjmp	.+28     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 45c:	ba 0f       	add	r27, r26
 45e:	62 1f       	adc	r22, r18
 460:	73 1f       	adc	r23, r19
 462:	84 1f       	adc	r24, r20
 464:	48 f4       	brcc	.+18     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 466:	87 95       	ror	r24
 468:	77 95       	ror	r23
 46a:	67 95       	ror	r22
 46c:	b7 95       	ror	r27
 46e:	f7 95       	ror	r31
 470:	9e 3f       	cpi	r25, 0xFE	; 254
 472:	08 f0       	brcs	.+2      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 474:	b0 cf       	rjmp	.-160    	; 0x3d6 <__addsf3+0x28>
 476:	93 95       	inc	r25
 478:	88 0f       	add	r24, r24
 47a:	08 f0       	brcs	.+2      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 47c:	99 27       	eor	r25, r25
 47e:	ee 0f       	add	r30, r30
 480:	97 95       	ror	r25
 482:	87 95       	ror	r24
 484:	08 95       	ret

00000486 <__divsf3>:
 486:	0e 94 57 02 	call	0x4ae	; 0x4ae <__divsf3x>
 48a:	0c 94 38 03 	jmp	0x670	; 0x670 <__fp_round>
 48e:	0e 94 31 03 	call	0x662	; 0x662 <__fp_pscB>
 492:	58 f0       	brcs	.+22     	; 0x4aa <__divsf3+0x24>
 494:	0e 94 2a 03 	call	0x654	; 0x654 <__fp_pscA>
 498:	40 f0       	brcs	.+16     	; 0x4aa <__divsf3+0x24>
 49a:	29 f4       	brne	.+10     	; 0x4a6 <__divsf3+0x20>
 49c:	5f 3f       	cpi	r21, 0xFF	; 255
 49e:	29 f0       	breq	.+10     	; 0x4aa <__divsf3+0x24>
 4a0:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_inf>
 4a4:	51 11       	cpse	r21, r1
 4a6:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__fp_szero>
 4aa:	0c 94 27 03 	jmp	0x64e	; 0x64e <__fp_nan>

000004ae <__divsf3x>:
 4ae:	0e 94 49 03 	call	0x692	; 0x692 <__fp_split3>
 4b2:	68 f3       	brcs	.-38     	; 0x48e <__divsf3+0x8>

000004b4 <__divsf3_pse>:
 4b4:	99 23       	and	r25, r25
 4b6:	b1 f3       	breq	.-20     	; 0x4a4 <__divsf3+0x1e>
 4b8:	55 23       	and	r21, r21
 4ba:	91 f3       	breq	.-28     	; 0x4a0 <__divsf3+0x1a>
 4bc:	95 1b       	sub	r25, r21
 4be:	55 0b       	sbc	r21, r21
 4c0:	bb 27       	eor	r27, r27
 4c2:	aa 27       	eor	r26, r26
 4c4:	62 17       	cp	r22, r18
 4c6:	73 07       	cpc	r23, r19
 4c8:	84 07       	cpc	r24, r20
 4ca:	38 f0       	brcs	.+14     	; 0x4da <__divsf3_pse+0x26>
 4cc:	9f 5f       	subi	r25, 0xFF	; 255
 4ce:	5f 4f       	sbci	r21, 0xFF	; 255
 4d0:	22 0f       	add	r18, r18
 4d2:	33 1f       	adc	r19, r19
 4d4:	44 1f       	adc	r20, r20
 4d6:	aa 1f       	adc	r26, r26
 4d8:	a9 f3       	breq	.-22     	; 0x4c4 <__divsf3_pse+0x10>
 4da:	35 d0       	rcall	.+106    	; 0x546 <__divsf3_pse+0x92>
 4dc:	0e 2e       	mov	r0, r30
 4de:	3a f0       	brmi	.+14     	; 0x4ee <__divsf3_pse+0x3a>
 4e0:	e0 e8       	ldi	r30, 0x80	; 128
 4e2:	32 d0       	rcall	.+100    	; 0x548 <__divsf3_pse+0x94>
 4e4:	91 50       	subi	r25, 0x01	; 1
 4e6:	50 40       	sbci	r21, 0x00	; 0
 4e8:	e6 95       	lsr	r30
 4ea:	00 1c       	adc	r0, r0
 4ec:	ca f7       	brpl	.-14     	; 0x4e0 <__divsf3_pse+0x2c>
 4ee:	2b d0       	rcall	.+86     	; 0x546 <__divsf3_pse+0x92>
 4f0:	fe 2f       	mov	r31, r30
 4f2:	29 d0       	rcall	.+82     	; 0x546 <__divsf3_pse+0x92>
 4f4:	66 0f       	add	r22, r22
 4f6:	77 1f       	adc	r23, r23
 4f8:	88 1f       	adc	r24, r24
 4fa:	bb 1f       	adc	r27, r27
 4fc:	26 17       	cp	r18, r22
 4fe:	37 07       	cpc	r19, r23
 500:	48 07       	cpc	r20, r24
 502:	ab 07       	cpc	r26, r27
 504:	b0 e8       	ldi	r27, 0x80	; 128
 506:	09 f0       	breq	.+2      	; 0x50a <__divsf3_pse+0x56>
 508:	bb 0b       	sbc	r27, r27
 50a:	80 2d       	mov	r24, r0
 50c:	bf 01       	movw	r22, r30
 50e:	ff 27       	eor	r31, r31
 510:	93 58       	subi	r25, 0x83	; 131
 512:	5f 4f       	sbci	r21, 0xFF	; 255
 514:	3a f0       	brmi	.+14     	; 0x524 <__divsf3_pse+0x70>
 516:	9e 3f       	cpi	r25, 0xFE	; 254
 518:	51 05       	cpc	r21, r1
 51a:	78 f0       	brcs	.+30     	; 0x53a <__divsf3_pse+0x86>
 51c:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_inf>
 520:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__fp_szero>
 524:	5f 3f       	cpi	r21, 0xFF	; 255
 526:	e4 f3       	brlt	.-8      	; 0x520 <__divsf3_pse+0x6c>
 528:	98 3e       	cpi	r25, 0xE8	; 232
 52a:	d4 f3       	brlt	.-12     	; 0x520 <__divsf3_pse+0x6c>
 52c:	86 95       	lsr	r24
 52e:	77 95       	ror	r23
 530:	67 95       	ror	r22
 532:	b7 95       	ror	r27
 534:	f7 95       	ror	r31
 536:	9f 5f       	subi	r25, 0xFF	; 255
 538:	c9 f7       	brne	.-14     	; 0x52c <__divsf3_pse+0x78>
 53a:	88 0f       	add	r24, r24
 53c:	91 1d       	adc	r25, r1
 53e:	96 95       	lsr	r25
 540:	87 95       	ror	r24
 542:	97 f9       	bld	r25, 7
 544:	08 95       	ret
 546:	e1 e0       	ldi	r30, 0x01	; 1
 548:	66 0f       	add	r22, r22
 54a:	77 1f       	adc	r23, r23
 54c:	88 1f       	adc	r24, r24
 54e:	bb 1f       	adc	r27, r27
 550:	62 17       	cp	r22, r18
 552:	73 07       	cpc	r23, r19
 554:	84 07       	cpc	r24, r20
 556:	ba 07       	cpc	r27, r26
 558:	20 f0       	brcs	.+8      	; 0x562 <__divsf3_pse+0xae>
 55a:	62 1b       	sub	r22, r18
 55c:	73 0b       	sbc	r23, r19
 55e:	84 0b       	sbc	r24, r20
 560:	ba 0b       	sbc	r27, r26
 562:	ee 1f       	adc	r30, r30
 564:	88 f7       	brcc	.-30     	; 0x548 <__divsf3_pse+0x94>
 566:	e0 95       	com	r30
 568:	08 95       	ret

0000056a <__fixunssfsi>:
 56a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__fp_splitA>
 56e:	88 f0       	brcs	.+34     	; 0x592 <__fixunssfsi+0x28>
 570:	9f 57       	subi	r25, 0x7F	; 127
 572:	98 f0       	brcs	.+38     	; 0x59a <__fixunssfsi+0x30>
 574:	b9 2f       	mov	r27, r25
 576:	99 27       	eor	r25, r25
 578:	b7 51       	subi	r27, 0x17	; 23
 57a:	b0 f0       	brcs	.+44     	; 0x5a8 <__fixunssfsi+0x3e>
 57c:	e1 f0       	breq	.+56     	; 0x5b6 <__fixunssfsi+0x4c>
 57e:	66 0f       	add	r22, r22
 580:	77 1f       	adc	r23, r23
 582:	88 1f       	adc	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	1a f0       	brmi	.+6      	; 0x58e <__fixunssfsi+0x24>
 588:	ba 95       	dec	r27
 58a:	c9 f7       	brne	.-14     	; 0x57e <__fixunssfsi+0x14>
 58c:	14 c0       	rjmp	.+40     	; 0x5b6 <__fixunssfsi+0x4c>
 58e:	b1 30       	cpi	r27, 0x01	; 1
 590:	91 f0       	breq	.+36     	; 0x5b6 <__fixunssfsi+0x4c>
 592:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__fp_zero>
 596:	b1 e0       	ldi	r27, 0x01	; 1
 598:	08 95       	ret
 59a:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__fp_zero>
 59e:	67 2f       	mov	r22, r23
 5a0:	78 2f       	mov	r23, r24
 5a2:	88 27       	eor	r24, r24
 5a4:	b8 5f       	subi	r27, 0xF8	; 248
 5a6:	39 f0       	breq	.+14     	; 0x5b6 <__fixunssfsi+0x4c>
 5a8:	b9 3f       	cpi	r27, 0xF9	; 249
 5aa:	cc f3       	brlt	.-14     	; 0x59e <__fixunssfsi+0x34>
 5ac:	86 95       	lsr	r24
 5ae:	77 95       	ror	r23
 5b0:	67 95       	ror	r22
 5b2:	b3 95       	inc	r27
 5b4:	d9 f7       	brne	.-10     	; 0x5ac <__fixunssfsi+0x42>
 5b6:	3e f4       	brtc	.+14     	; 0x5c6 <__fixunssfsi+0x5c>
 5b8:	90 95       	com	r25
 5ba:	80 95       	com	r24
 5bc:	70 95       	com	r23
 5be:	61 95       	neg	r22
 5c0:	7f 4f       	sbci	r23, 0xFF	; 255
 5c2:	8f 4f       	sbci	r24, 0xFF	; 255
 5c4:	9f 4f       	sbci	r25, 0xFF	; 255
 5c6:	08 95       	ret

000005c8 <__floatunsisf>:
 5c8:	e8 94       	clt
 5ca:	09 c0       	rjmp	.+18     	; 0x5de <__floatsisf+0x12>

000005cc <__floatsisf>:
 5cc:	97 fb       	bst	r25, 7
 5ce:	3e f4       	brtc	.+14     	; 0x5de <__floatsisf+0x12>
 5d0:	90 95       	com	r25
 5d2:	80 95       	com	r24
 5d4:	70 95       	com	r23
 5d6:	61 95       	neg	r22
 5d8:	7f 4f       	sbci	r23, 0xFF	; 255
 5da:	8f 4f       	sbci	r24, 0xFF	; 255
 5dc:	9f 4f       	sbci	r25, 0xFF	; 255
 5de:	99 23       	and	r25, r25
 5e0:	a9 f0       	breq	.+42     	; 0x60c <__floatsisf+0x40>
 5e2:	f9 2f       	mov	r31, r25
 5e4:	96 e9       	ldi	r25, 0x96	; 150
 5e6:	bb 27       	eor	r27, r27
 5e8:	93 95       	inc	r25
 5ea:	f6 95       	lsr	r31
 5ec:	87 95       	ror	r24
 5ee:	77 95       	ror	r23
 5f0:	67 95       	ror	r22
 5f2:	b7 95       	ror	r27
 5f4:	f1 11       	cpse	r31, r1
 5f6:	f8 cf       	rjmp	.-16     	; 0x5e8 <__floatsisf+0x1c>
 5f8:	fa f4       	brpl	.+62     	; 0x638 <__floatsisf+0x6c>
 5fa:	bb 0f       	add	r27, r27
 5fc:	11 f4       	brne	.+4      	; 0x602 <__floatsisf+0x36>
 5fe:	60 ff       	sbrs	r22, 0
 600:	1b c0       	rjmp	.+54     	; 0x638 <__floatsisf+0x6c>
 602:	6f 5f       	subi	r22, 0xFF	; 255
 604:	7f 4f       	sbci	r23, 0xFF	; 255
 606:	8f 4f       	sbci	r24, 0xFF	; 255
 608:	9f 4f       	sbci	r25, 0xFF	; 255
 60a:	16 c0       	rjmp	.+44     	; 0x638 <__floatsisf+0x6c>
 60c:	88 23       	and	r24, r24
 60e:	11 f0       	breq	.+4      	; 0x614 <__floatsisf+0x48>
 610:	96 e9       	ldi	r25, 0x96	; 150
 612:	11 c0       	rjmp	.+34     	; 0x636 <__floatsisf+0x6a>
 614:	77 23       	and	r23, r23
 616:	21 f0       	breq	.+8      	; 0x620 <__floatsisf+0x54>
 618:	9e e8       	ldi	r25, 0x8E	; 142
 61a:	87 2f       	mov	r24, r23
 61c:	76 2f       	mov	r23, r22
 61e:	05 c0       	rjmp	.+10     	; 0x62a <__floatsisf+0x5e>
 620:	66 23       	and	r22, r22
 622:	71 f0       	breq	.+28     	; 0x640 <__floatsisf+0x74>
 624:	96 e8       	ldi	r25, 0x86	; 134
 626:	86 2f       	mov	r24, r22
 628:	70 e0       	ldi	r23, 0x00	; 0
 62a:	60 e0       	ldi	r22, 0x00	; 0
 62c:	2a f0       	brmi	.+10     	; 0x638 <__floatsisf+0x6c>
 62e:	9a 95       	dec	r25
 630:	66 0f       	add	r22, r22
 632:	77 1f       	adc	r23, r23
 634:	88 1f       	adc	r24, r24
 636:	da f7       	brpl	.-10     	; 0x62e <__floatsisf+0x62>
 638:	88 0f       	add	r24, r24
 63a:	96 95       	lsr	r25
 63c:	87 95       	ror	r24
 63e:	97 f9       	bld	r25, 7
 640:	08 95       	ret

00000642 <__fp_inf>:
 642:	97 f9       	bld	r25, 7
 644:	9f 67       	ori	r25, 0x7F	; 127
 646:	80 e8       	ldi	r24, 0x80	; 128
 648:	70 e0       	ldi	r23, 0x00	; 0
 64a:	60 e0       	ldi	r22, 0x00	; 0
 64c:	08 95       	ret

0000064e <__fp_nan>:
 64e:	9f ef       	ldi	r25, 0xFF	; 255
 650:	80 ec       	ldi	r24, 0xC0	; 192
 652:	08 95       	ret

00000654 <__fp_pscA>:
 654:	00 24       	eor	r0, r0
 656:	0a 94       	dec	r0
 658:	16 16       	cp	r1, r22
 65a:	17 06       	cpc	r1, r23
 65c:	18 06       	cpc	r1, r24
 65e:	09 06       	cpc	r0, r25
 660:	08 95       	ret

00000662 <__fp_pscB>:
 662:	00 24       	eor	r0, r0
 664:	0a 94       	dec	r0
 666:	12 16       	cp	r1, r18
 668:	13 06       	cpc	r1, r19
 66a:	14 06       	cpc	r1, r20
 66c:	05 06       	cpc	r0, r21
 66e:	08 95       	ret

00000670 <__fp_round>:
 670:	09 2e       	mov	r0, r25
 672:	03 94       	inc	r0
 674:	00 0c       	add	r0, r0
 676:	11 f4       	brne	.+4      	; 0x67c <__fp_round+0xc>
 678:	88 23       	and	r24, r24
 67a:	52 f0       	brmi	.+20     	; 0x690 <__fp_round+0x20>
 67c:	bb 0f       	add	r27, r27
 67e:	40 f4       	brcc	.+16     	; 0x690 <__fp_round+0x20>
 680:	bf 2b       	or	r27, r31
 682:	11 f4       	brne	.+4      	; 0x688 <__fp_round+0x18>
 684:	60 ff       	sbrs	r22, 0
 686:	04 c0       	rjmp	.+8      	; 0x690 <__fp_round+0x20>
 688:	6f 5f       	subi	r22, 0xFF	; 255
 68a:	7f 4f       	sbci	r23, 0xFF	; 255
 68c:	8f 4f       	sbci	r24, 0xFF	; 255
 68e:	9f 4f       	sbci	r25, 0xFF	; 255
 690:	08 95       	ret

00000692 <__fp_split3>:
 692:	57 fd       	sbrc	r21, 7
 694:	90 58       	subi	r25, 0x80	; 128
 696:	44 0f       	add	r20, r20
 698:	55 1f       	adc	r21, r21
 69a:	59 f0       	breq	.+22     	; 0x6b2 <__fp_splitA+0x10>
 69c:	5f 3f       	cpi	r21, 0xFF	; 255
 69e:	71 f0       	breq	.+28     	; 0x6bc <__fp_splitA+0x1a>
 6a0:	47 95       	ror	r20

000006a2 <__fp_splitA>:
 6a2:	88 0f       	add	r24, r24
 6a4:	97 fb       	bst	r25, 7
 6a6:	99 1f       	adc	r25, r25
 6a8:	61 f0       	breq	.+24     	; 0x6c2 <__fp_splitA+0x20>
 6aa:	9f 3f       	cpi	r25, 0xFF	; 255
 6ac:	79 f0       	breq	.+30     	; 0x6cc <__fp_splitA+0x2a>
 6ae:	87 95       	ror	r24
 6b0:	08 95       	ret
 6b2:	12 16       	cp	r1, r18
 6b4:	13 06       	cpc	r1, r19
 6b6:	14 06       	cpc	r1, r20
 6b8:	55 1f       	adc	r21, r21
 6ba:	f2 cf       	rjmp	.-28     	; 0x6a0 <__fp_split3+0xe>
 6bc:	46 95       	lsr	r20
 6be:	f1 df       	rcall	.-30     	; 0x6a2 <__fp_splitA>
 6c0:	08 c0       	rjmp	.+16     	; 0x6d2 <__fp_splitA+0x30>
 6c2:	16 16       	cp	r1, r22
 6c4:	17 06       	cpc	r1, r23
 6c6:	18 06       	cpc	r1, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	f1 cf       	rjmp	.-30     	; 0x6ae <__fp_splitA+0xc>
 6cc:	86 95       	lsr	r24
 6ce:	71 05       	cpc	r23, r1
 6d0:	61 05       	cpc	r22, r1
 6d2:	08 94       	sec
 6d4:	08 95       	ret

000006d6 <__fp_zero>:
 6d6:	e8 94       	clt

000006d8 <__fp_szero>:
 6d8:	bb 27       	eor	r27, r27
 6da:	66 27       	eor	r22, r22
 6dc:	77 27       	eor	r23, r23
 6de:	cb 01       	movw	r24, r22
 6e0:	97 f9       	bld	r25, 7
 6e2:	08 95       	ret

000006e4 <__mulsf3>:
 6e4:	0e 94 85 03 	call	0x70a	; 0x70a <__mulsf3x>
 6e8:	0c 94 38 03 	jmp	0x670	; 0x670 <__fp_round>
 6ec:	0e 94 2a 03 	call	0x654	; 0x654 <__fp_pscA>
 6f0:	38 f0       	brcs	.+14     	; 0x700 <__mulsf3+0x1c>
 6f2:	0e 94 31 03 	call	0x662	; 0x662 <__fp_pscB>
 6f6:	20 f0       	brcs	.+8      	; 0x700 <__mulsf3+0x1c>
 6f8:	95 23       	and	r25, r21
 6fa:	11 f0       	breq	.+4      	; 0x700 <__mulsf3+0x1c>
 6fc:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_inf>
 700:	0c 94 27 03 	jmp	0x64e	; 0x64e <__fp_nan>
 704:	11 24       	eor	r1, r1
 706:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__fp_szero>

0000070a <__mulsf3x>:
 70a:	0e 94 49 03 	call	0x692	; 0x692 <__fp_split3>
 70e:	70 f3       	brcs	.-36     	; 0x6ec <__mulsf3+0x8>

00000710 <__mulsf3_pse>:
 710:	95 9f       	mul	r25, r21
 712:	c1 f3       	breq	.-16     	; 0x704 <__mulsf3+0x20>
 714:	95 0f       	add	r25, r21
 716:	50 e0       	ldi	r21, 0x00	; 0
 718:	55 1f       	adc	r21, r21
 71a:	62 9f       	mul	r22, r18
 71c:	f0 01       	movw	r30, r0
 71e:	72 9f       	mul	r23, r18
 720:	bb 27       	eor	r27, r27
 722:	f0 0d       	add	r31, r0
 724:	b1 1d       	adc	r27, r1
 726:	63 9f       	mul	r22, r19
 728:	aa 27       	eor	r26, r26
 72a:	f0 0d       	add	r31, r0
 72c:	b1 1d       	adc	r27, r1
 72e:	aa 1f       	adc	r26, r26
 730:	64 9f       	mul	r22, r20
 732:	66 27       	eor	r22, r22
 734:	b0 0d       	add	r27, r0
 736:	a1 1d       	adc	r26, r1
 738:	66 1f       	adc	r22, r22
 73a:	82 9f       	mul	r24, r18
 73c:	22 27       	eor	r18, r18
 73e:	b0 0d       	add	r27, r0
 740:	a1 1d       	adc	r26, r1
 742:	62 1f       	adc	r22, r18
 744:	73 9f       	mul	r23, r19
 746:	b0 0d       	add	r27, r0
 748:	a1 1d       	adc	r26, r1
 74a:	62 1f       	adc	r22, r18
 74c:	83 9f       	mul	r24, r19
 74e:	a0 0d       	add	r26, r0
 750:	61 1d       	adc	r22, r1
 752:	22 1f       	adc	r18, r18
 754:	74 9f       	mul	r23, r20
 756:	33 27       	eor	r19, r19
 758:	a0 0d       	add	r26, r0
 75a:	61 1d       	adc	r22, r1
 75c:	23 1f       	adc	r18, r19
 75e:	84 9f       	mul	r24, r20
 760:	60 0d       	add	r22, r0
 762:	21 1d       	adc	r18, r1
 764:	82 2f       	mov	r24, r18
 766:	76 2f       	mov	r23, r22
 768:	6a 2f       	mov	r22, r26
 76a:	11 24       	eor	r1, r1
 76c:	9f 57       	subi	r25, 0x7F	; 127
 76e:	50 40       	sbci	r21, 0x00	; 0
 770:	9a f0       	brmi	.+38     	; 0x798 <__mulsf3_pse+0x88>
 772:	f1 f0       	breq	.+60     	; 0x7b0 <__mulsf3_pse+0xa0>
 774:	88 23       	and	r24, r24
 776:	4a f0       	brmi	.+18     	; 0x78a <__mulsf3_pse+0x7a>
 778:	ee 0f       	add	r30, r30
 77a:	ff 1f       	adc	r31, r31
 77c:	bb 1f       	adc	r27, r27
 77e:	66 1f       	adc	r22, r22
 780:	77 1f       	adc	r23, r23
 782:	88 1f       	adc	r24, r24
 784:	91 50       	subi	r25, 0x01	; 1
 786:	50 40       	sbci	r21, 0x00	; 0
 788:	a9 f7       	brne	.-22     	; 0x774 <__mulsf3_pse+0x64>
 78a:	9e 3f       	cpi	r25, 0xFE	; 254
 78c:	51 05       	cpc	r21, r1
 78e:	80 f0       	brcs	.+32     	; 0x7b0 <__mulsf3_pse+0xa0>
 790:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_inf>
 794:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__fp_szero>
 798:	5f 3f       	cpi	r21, 0xFF	; 255
 79a:	e4 f3       	brlt	.-8      	; 0x794 <__mulsf3_pse+0x84>
 79c:	98 3e       	cpi	r25, 0xE8	; 232
 79e:	d4 f3       	brlt	.-12     	; 0x794 <__mulsf3_pse+0x84>
 7a0:	86 95       	lsr	r24
 7a2:	77 95       	ror	r23
 7a4:	67 95       	ror	r22
 7a6:	b7 95       	ror	r27
 7a8:	f7 95       	ror	r31
 7aa:	e7 95       	ror	r30
 7ac:	9f 5f       	subi	r25, 0xFF	; 255
 7ae:	c1 f7       	brne	.-16     	; 0x7a0 <__mulsf3_pse+0x90>
 7b0:	fe 2b       	or	r31, r30
 7b2:	88 0f       	add	r24, r24
 7b4:	91 1d       	adc	r25, r1
 7b6:	96 95       	lsr	r25
 7b8:	87 95       	ror	r24
 7ba:	97 f9       	bld	r25, 7
 7bc:	08 95       	ret

000007be <_exit>:
 7be:	f8 94       	cli

000007c0 <__stop_program>:
 7c0:	ff cf       	rjmp	.-2      	; 0x7c0 <__stop_program>
